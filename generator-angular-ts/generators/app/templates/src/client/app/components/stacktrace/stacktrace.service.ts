/// <reference path="../../typings/app.d.ts" />

module app.components.stacktrace {
    'use strict';

	// Let typescript know about the global function defined by stacktace.js
	interface IStackframePrinter {
		(): string[];
	}

	declare var printStackTrace: IStackframePrinter;

	interface IStackFrame {
		// e.g. http://host.com/components/
		path: string;
		// e.g. component-service.js
		file: string;
		// e.g. Component.componentFunction
		func: string;
		// e.g. 234
		line: string;
		// e.g. 23
		col: string;
	}

	export class StacktraceService {

		constructor() {
		}
		
		public print: IStackframePrinter = printStackTrace;

		public getLocalStackTrace(callerName: string): Array<IStackFrame> {
			if (callerName == null) {
				callerName = 'Stacktrace';
			} else {
				callerName = 'Stacktrace: ' + callerName;
			}
			
			var stackFrames: string[] = printStackTrace();
			var frames: IStackFrame[] = [];

			for (var i = 0; i < stackFrames.length; i++) {
				var frameStr = stackFrames[i];
				if (frameStr.startsWith('Object.printStackTrace')) {
					continue;
				}
				var frame = this.parseFrame(frameStr);
				if (frame.path.contains('bower_components') || frame.func.endsWith('getLocalStackTrace') || frame.file === 'stacktrace-service.js' || frame.file === 'profile-service.js') {
					continue;
				}
				frames.push(frame);
			}

			return frames;
		}

		// Takes a string, as generated by stacktrace.js
		// and parses it into a well-defined frame object
		private parseFrame(frame: string): IStackFrame {
			var atIdx = frame.indexOf('@');
			var func = frame.substring(0, atIdx);
			// The calling function usually has a spurious object prepended
			// let's drop it
			var fullSt = func.indexOf('.');
			if (fullSt > 0) {
				func = func.substring(fullSt + 1);
			}
			var loc = frame.substring(atIdx + 1);
			var lastSlash = loc.lastIndexOf('/');
			var path = loc.substring(0, lastSlash);
			var fileAndSpec = loc.substring(lastSlash + 1);
			var colon = fileAndSpec.indexOf(':');
			var file = fileAndSpec.substring(0, colon);
			var spec = fileAndSpec.substring(colon + 1);
			colon = spec.indexOf(':');
			var line = spec.substring(0, colon);
			var col = spec.substring(colon + 1);
			return {
				path: path,
				file: file,
				func: func,
				line: line,
				col: col,
			};
		}
	}

	var m = app.Module.load('app.components.stacktrace');
	m.addService('StacktraceService', StacktraceService);
}
